import { Resolvable } from "./Resolvable";
import { ResolvedValue } from "./ResolvedValue";
import { ResolvedValueWithId } from "./ResolvedValueWithId";
export type DataContextState = {
  [key: string]: string | number | boolean | Resolvable;
};
export interface DataContext {
  get(key: string): Resolvable | undefined;
  resolve(key: string): ResolvedValue | undefined;
  keys(): string[];
  search(pattern: string): ResolvedValueWithId[];
}
export interface ImmutableDataContext extends DataContext {
  replace(key: string, value: string | number | boolean): ImmutableDataContext;
}
export declare class ImmutableDataContext {
  static of(state: DataContextState): ImmutableDataContext;
}
export interface MutableDataContext extends DataContext {
  set(key: string, value: string | number | boolean | Resolvable): void;
  remove(key: string): void;
  rename(key: string, to: string): void;
}
export declare class DataContext {
  static Empty: DataContext;
  static of(state: DataContextState): MutableDataContext;
}
export declare abstract class BaseDataContext implements DataContext {
  resolve(key: string): ResolvedValue | undefined;
  search(pattern: string): ResolvedValueWithId[];
  abstract get(key: string): Resolvable | undefined;
  abstract keys(): string[];
}
export declare class StaticImmutableDataContext
  extends BaseDataContext
  implements ImmutableDataContext
{
  private readonly state;
  constructor(state?: DataContextState);
  get(key: string): Resolvable | undefined;
  resolve(key: string): ResolvedValue | undefined;
  replace(key: string, value: string | number): ImmutableDataContext;
  keys(): string[];
}
